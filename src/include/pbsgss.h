/*
 * Copyright (C) 1994-2019 Altair Engineering, Inc.
 * For more information, contact Altair at www.altair.com.
 *
 * This file is part of the PBS Professional ("PBS Pro") software.
 *
 * Open Source License Information:
 *
 * PBS Pro is free software. You can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Commercial License Information:
 *
 * For a copy of the commercial license terms and conditions,
 * go to: (http://www.pbspro.com/UserArea/agreement.html)
 * or contact the Altair Legal Department.
 *
 * Altair’s dual-license business model allows companies, individuals, and
 * organizations to create proprietary derivative works of PBS Pro and
 * distribute them - whether embedded or bundled with other software -
 * under a commercial license agreement.
 *
 * Use of Altair’s trademarks, including but not limited to "PBS™",
 * "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
 * trademark licensing policies.
 *
 */

#ifndef _PBSGSS_H_
#define _PBSGSS_H_

#include <pbs_config.h>   /* the master config generated by configure */

// only include if KRB5 support is enabled
#if defined(PBS_SECURITY) && (PBS_SECURITY == KRB5)

#include <gssapi.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif

extern int ignore_kerberos_for_connection;

void pbsgss_display_status(const char *msg, OM_uint32 maj_stat, OM_uint32 min_stat);
int pbsgss_can_get_creds();
int pbsgss_server_establish_context(int s, gss_cred_id_t server_creds, gss_cred_id_t *client_creds, gss_ctx_id_t *context, gss_buffer_t client_name, OM_uint32 *ret_flags);
int pbsgss_server_acquire_creds(char *service_name, gss_cred_id_t *server_creds);
int pbsgss_save_sec_context(gss_ctx_id_t *context, OM_uint32 flags, int fd);
int pbsgss_client_authenticate(char *hostname, int psock, int delegate, int wrap);

#define KRB5_SERVICE_NAME "host"
#define KRB5_CLIENT_CCNAME "FILE:/tmp/krb5cc_pbs_client"

#define gss_nt_service_name GSS_C_NT_HOSTBASED_SERVICE

/* Token types */
#define TOKEN_NOOP              (1<<0)
#define TOKEN_CONTEXT           (1<<1)
#define TOKEN_DATA              (1<<2)
#define TOKEN_MIC               (1<<3)

/* Token flags */
#define TOKEN_CONTEXT_NEXT      (1<<4)
#define TOKEN_WRAPPED           (1<<5)
#define TOKEN_ENCRYPTED         (1<<6)
#define TOKEN_SEND_MIC          (1<<7)


enum PBSGSS_ERRORS {
	PBSGSS_OK = 0,
	PBSGSS_ERR_IMPORT_NAME,
	PBSGSS_ERR_ACQUIRE_CREDS,
	PBSGSS_ERR_INTERNAL,
	PBSGSS_ERR_WRAPSIZE,
	PBSGSS_ERR_CONTEXT_DELETE,
	PBSGSS_ERR_CONTEXT_SAVE,
	PBSGSS_ERR_IMPORT,
	PBSGSS_ERR_IMPORTNAME,
	PBSGSS_ERR_CONTEXT_INIT,
	PBSGSS_ERR_READ = 10,
	PBSGSS_ERR_READ_TEMP,
	PBSGSS_ERR_SENDTOKEN,
	PBSGSS_ERR_RECVTOKEN,
	PBSGSS_ERR_ACCEPT_TOKEN,
	PBSGSS_ERR_NAME_CONVERT,
	PBSGSS_ERR_NO_KRB_PRINC,
	PBSGSS_ERR_NO_USERNAME,
	PBSGSS_ERR_USER_NOT_FOUND,
	PBSGSS_ERR_CANT_OPEN_FILE,
	PBSGSS_ERR_KILL_RENEWAL_PROCESS = 20,
	PBSGSS_ERR_GET_CREDS,
	PBSGSS_ERR_FLOOR
};

#ifdef __cplusplus
}
#endif

#endif

#endif
